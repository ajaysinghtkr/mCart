{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  // Fetches selectedProducts data from the sessionStorage\n  constructor(http) {\n    this.http = http;\n    this.selectedProducts = [];\n    this.products = [];\n    this.producttype = 'tablet';\n    this.username = '';\n    if (sessionStorage.getItem('selectedProducts')) {\n      this.selectedProducts = JSON.parse(sessionStorage.getItem('selectedProducts') + '');\n    }\n  }\n  // Makes a get request to backend to fetch products data\n  getProducts() {\n    if (this.producttype === 'tablet') {\n      return this.http.get('./assets/products/tablets.json').pipe(catchError(this.handleError));\n    } else if (this.producttype === 'mobile') {\n      return this.http.get('./assets/products/mobiles.json').pipe(catchError(this.handleError));\n    }\n    throw new Error();\n  }\n  // Fetches the selected product details\n  getProduct(id) {\n    return this.getProducts().pipe(map(products => products.filter(product => product.productId === id)[0]));\n  }\n  // Error Handling code\n  handleError(err) {\n    console.log(err);\n    return throwError(err.error() || 'Server error');\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","catchError","map","ProductService","constructor","http","selectedProducts","products","producttype","username","sessionStorage","getItem","JSON","parse","getProducts","get","pipe","handleError","Error","getProduct","id","filter","product","productId","err","console","log","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\tnikitha.surendra\\Pictures\\Ang16_BS5_mCart\\src\\app\\products\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators'\r\n\r\nimport { Product } from './product';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n    selectedProducts: any = [];\r\n    products: any = [];\r\n    producttype = 'tablet';\r\n    username: string = '';\r\n \r\n\r\n    // Fetches selectedProducts data from the sessionStorage\r\n    constructor(private http: HttpClient) {\r\n        if (sessionStorage.getItem('selectedProducts')) {\r\n            this.selectedProducts = JSON.parse(sessionStorage.getItem('selectedProducts')+'');\r\n        }\r\n    }\r\n\r\n    // Makes a get request to backend to fetch products data\r\n    getProducts(): Observable<Product[]> {\r\n        if (this.producttype === 'tablet') {\r\n            return this.http.get<Product[]>('./assets/products/tablets.json').pipe(\r\n                catchError( this.handleError));\r\n        } else if (this.producttype === 'mobile') {\r\n            return this.http.get<Product[]>('./assets/products/mobiles.json').pipe(\r\n                catchError(this.handleError));\r\n        }\r\nthrow new Error();\r\n    }\r\n\r\n    // Fetches the selected product details\r\n    getProduct(id: number): Observable<Product>{\r\n        return this.getProducts().pipe(\r\n            map(products => products.filter(product => product.productId === id)[0]));\r\n    }\r\n\r\n    // Error Handling code\r\n    private handleError(err: HttpErrorResponse) {\r\n        console.log(err);\r\n        return throwError(err.error() || 'Server error');\r\n    }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAOhD,OAAM,MAAOC,cAAc;EAQvB;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,gBAAgB,GAAQ,EAAE;IAC1B,KAAAC,QAAQ,GAAQ,EAAE;IAClB,KAAAC,WAAW,GAAG,QAAQ;IACtB,KAAAC,QAAQ,GAAW,EAAE;IAKjB,IAAIC,cAAc,CAACC,OAAO,CAAC,kBAAkB,CAAC,EAAE;MAC5C,IAAI,CAACL,gBAAgB,GAAGM,IAAI,CAACC,KAAK,CAACH,cAAc,CAACC,OAAO,CAAC,kBAAkB,CAAC,GAAC,EAAE,CAAC;;EAEzF;EAEA;EACAG,WAAWA,CAAA;IACP,IAAI,IAAI,CAACN,WAAW,KAAK,QAAQ,EAAE;MAC/B,OAAO,IAAI,CAACH,IAAI,CAACU,GAAG,CAAY,gCAAgC,CAAC,CAACC,IAAI,CAClEf,UAAU,CAAE,IAAI,CAACgB,WAAW,CAAC,CAAC;KACrC,MAAM,IAAI,IAAI,CAACT,WAAW,KAAK,QAAQ,EAAE;MACtC,OAAO,IAAI,CAACH,IAAI,CAACU,GAAG,CAAY,gCAAgC,CAAC,CAACC,IAAI,CAClEf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;;IAE7C,MAAM,IAAIC,KAAK,EAAE;EACb;EAEA;EACAC,UAAUA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACN,WAAW,EAAE,CAACE,IAAI,CAC1Bd,GAAG,CAACK,QAAQ,IAAIA,QAAQ,CAACc,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,SAAS,KAAKH,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjF;EAEA;EACQH,WAAWA,CAACO,GAAsB;IACtCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB,OAAOxB,UAAU,CAACwB,GAAG,CAACG,KAAK,EAAE,IAAI,cAAc,CAAC;EACpD;;AArCSxB,cAAc,C;mBAAdA,cAAc,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAd5B,cAAc,C;SAAdA,cAAc;EAAA6B,OAAA,EAAd7B,cAAc,CAAA8B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}